@use "sass:math";

// VARIABLES
// VARIABLES
// VARIABLES

$body-padding: 30px;
$gap: 20px;
$grid-row-height: 30px;
$grid-column-column-limit: 3;
$grid-column-item-limit: 10;
$grid-column-max-width: 200px;


// FUNCTIONS
// FUNCTIONS
// FUNCTIONS

@function calculate-number-of-grid-columns($number-of-items, $column-item-limit: $grid-column-item-limit) {
    @return round(up, $number-of-items / $column-item-limit, 1);
}

@function calculate-grid-max-width($number-of-items, $column-item-limit: $grid-column-item-limit) {
    $total-number-of-columns: calculate-number-of-grid-columns($number-of-items, $column-item-limit);
    $width-of-columns: $total-number-of-columns * $grid-column-max-width;
    $width-of-gaps: ($total-number-of-columns - 1) * $gap;

    @return $width-of-columns + $width-of-gaps;
}


// MIXINS
// MIXINS
// MIXINS

@mixin grid-max-height($column-item-limit: $grid-column-item-limit) {
    max-height: ($column-item-limit * $grid-row-height) + ($gap * ($column-item-limit - 1));
}

@mixin grid-max-width($number-of-items, $column-item-limit: $grid-column-item-limit) {
    max-width: calculate-grid-max-width($number-of-items, $column-item-limit)
}


// DEFAULT OVERRIDES
// DEFAULT OVERRIDES
// DEFAULT OVERRIDES

html {
    font-size: 16px;
    line-height: 1.5;
}

h1,
h2,
h3 {
    line-height: 1.2;
    letter-spacing: -2%;
}

body {
    gap: $gap;
    margin: 0;
    padding: $body-padding;
}

button {
    margin-bottom: 1rem;
}

label {
    padding-bottom: 1rem;
}

hr {
    border: 1px solid black;
    width: 100%;
}


// HELPERS
// HELPERS
// HELPERS

.border {
    border: 1px solid purple;
}

.Explanation {
    max-width: 720px;
}

.hidden {
    display: none !important;
}

.gap {
    gap: $gap;
}


// LAYOUT CLASSES
// LAYOUT CLASSES
// LAYOUT CLASSES

.flex {
    display: flex;
}

.flex-column {
    display: flex;
    flex-direction: column;
}

.flex-grow {
    flex-grow: 1;
}

.flex-wrap {
    flex-wrap: wrap;
}

.footer-column {
    @include grid-max-height;
    height: 100%;

    /* stylelint-disable max-nesting-depth */
    @for $i from 1 through 40 {
        $number-of-columns: calculate-number-of-grid-columns($i, $grid-column-item-limit);
        $column-item-limit: $grid-column-item-limit;

        // @debug "NUMBEROFCOLUMNS: #{$number-of-columns}";

        &--#{$i} {
            @include grid-max-width($number-of-items: $i);

            @if $number-of-columns > 1 {
                $current-column-limit: $grid-column-item-limit;

                @for $ii from $number-of-columns through 2 {
                    $new-column-item-limit: round(up, math.div($i, ($ii - 1)), 1);
                    $breakpoint: calculate-grid-max-width($number-of-items: $i, $column-item-limit: $current-column-limit) + ($body-padding * 2) - 1;

                    // @debug "NEW COLUMN LIMIT: #{$i} / #{$ii} = #{$new-column-item-limit}";
                    // @debug "BREAKPOINT: #{$breakpoint}";

                    @media screen and (max-width: $breakpoint) {
                        @include grid-max-height($column-item-limit: $new-column-item-limit);
                    }

                    $current-column-limit: $new-column-item-limit;
                }
            }
        }
    }
    /* stylelint-enable max-nesting-depth */
}

.grid {
    display: grid;
}

.grid-flow-column {
    grid-auto-flow: column;
}

.grid-template-columns {
    grid-template-columns: repeat(auto-fit, minmax(80px, $grid-column-max-width));
}

.grid-template-rows {
    grid-template-rows: repeat(auto-fit, minmax(30px, max-content));
}
